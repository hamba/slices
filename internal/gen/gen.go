package main

import (
	"bytes"
	"go/format"
	"io/ioutil"
	"log"
	"text/template"
)

var tmpl = `package slices

// Code generated by 'gen.go'. DO NOT EDIT.

import "unsafe"

// Contains
{{- range $i, $type := .contains}}
func {{ $type }}Contains(sptr, vptr unsafe.Pointer) bool {
	v := *(*{{ $type }})(vptr)
	for _, vv := range *(*[]{{ $type }})(sptr) {
		if vv == v {
			return true
		}
	}
	return false
}
{{end -}}

// LesserOf
{{- range $i, $type := .lesserOf}}
func {{ $type }}Lesser(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]{{ $type }})(ptr)
		return v[i] < v[j]
	}
}
{{end -}}

// GreaterOf
{{- range $i, $type := .lesserOf}}
func {{ $type }}Greater(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]{{ $type }})(ptr)
		return v[i] > v[j]
	}
}
{{end -}}
`

func main() {
	base := template.New("gen")
	parse, err := base.Parse(tmpl)
	if err != nil {
		log.Fatal(err)
	}

	ops := map[string][]string {
		"contains": {"bool", "string", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "float32", "float64"},
		"lesserOf": {"string", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "float32", "float64"},
		"greaterOf": {"string", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "float32", "float64"},
	}

	b := &bytes.Buffer{}
	if err = parse.Execute(b, ops); err != nil {
		log.Fatal(err)
	}

	// gofmt
	source, err := format.Source(b.Bytes())
	if err != nil {
		log.Fatal(err)
	}

	if err = ioutil.WriteFile("ops.gen.go", source, 0666); err != nil {
		log.Fatal(err)
	}
}
