package slices

// Code generated by 'gen.go'. DO NOT EDIT.

import "unsafe"

// Contains
func boolContains(sptr, vptr unsafe.Pointer) bool {
	v := *(*bool)(vptr)
	for _, vv := range *(*[]bool)(sptr) {
		if vv == v {
			return true
		}
	}
	return false
}

func stringContains(sptr, vptr unsafe.Pointer) bool {
	v := *(*string)(vptr)
	for _, vv := range *(*[]string)(sptr) {
		if vv == v {
			return true
		}
	}
	return false
}

func intContains(sptr, vptr unsafe.Pointer) bool {
	v := *(*int)(vptr)
	for _, vv := range *(*[]int)(sptr) {
		if vv == v {
			return true
		}
	}
	return false
}

func int8Contains(sptr, vptr unsafe.Pointer) bool {
	v := *(*int8)(vptr)
	for _, vv := range *(*[]int8)(sptr) {
		if vv == v {
			return true
		}
	}
	return false
}

func int16Contains(sptr, vptr unsafe.Pointer) bool {
	v := *(*int16)(vptr)
	for _, vv := range *(*[]int16)(sptr) {
		if vv == v {
			return true
		}
	}
	return false
}

func int32Contains(sptr, vptr unsafe.Pointer) bool {
	v := *(*int32)(vptr)
	for _, vv := range *(*[]int32)(sptr) {
		if vv == v {
			return true
		}
	}
	return false
}

func int64Contains(sptr, vptr unsafe.Pointer) bool {
	v := *(*int64)(vptr)
	for _, vv := range *(*[]int64)(sptr) {
		if vv == v {
			return true
		}
	}
	return false
}

func uintContains(sptr, vptr unsafe.Pointer) bool {
	v := *(*uint)(vptr)
	for _, vv := range *(*[]uint)(sptr) {
		if vv == v {
			return true
		}
	}
	return false
}

func uint8Contains(sptr, vptr unsafe.Pointer) bool {
	v := *(*uint8)(vptr)
	for _, vv := range *(*[]uint8)(sptr) {
		if vv == v {
			return true
		}
	}
	return false
}

func uint16Contains(sptr, vptr unsafe.Pointer) bool {
	v := *(*uint16)(vptr)
	for _, vv := range *(*[]uint16)(sptr) {
		if vv == v {
			return true
		}
	}
	return false
}

func uint32Contains(sptr, vptr unsafe.Pointer) bool {
	v := *(*uint32)(vptr)
	for _, vv := range *(*[]uint32)(sptr) {
		if vv == v {
			return true
		}
	}
	return false
}

func uint64Contains(sptr, vptr unsafe.Pointer) bool {
	v := *(*uint64)(vptr)
	for _, vv := range *(*[]uint64)(sptr) {
		if vv == v {
			return true
		}
	}
	return false
}

func float32Contains(sptr, vptr unsafe.Pointer) bool {
	v := *(*float32)(vptr)
	for _, vv := range *(*[]float32)(sptr) {
		if vv == v {
			return true
		}
	}
	return false
}

func float64Contains(sptr, vptr unsafe.Pointer) bool {
	v := *(*float64)(vptr)
	for _, vv := range *(*[]float64)(sptr) {
		if vv == v {
			return true
		}
	}
	return false
}

// LesserOf
func stringLesser(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]string)(ptr)
		return v[i] < v[j]
	}
}

func intLesser(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]int)(ptr)
		return v[i] < v[j]
	}
}

func int8Lesser(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]int8)(ptr)
		return v[i] < v[j]
	}
}

func int16Lesser(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]int16)(ptr)
		return v[i] < v[j]
	}
}

func int32Lesser(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]int32)(ptr)
		return v[i] < v[j]
	}
}

func int64Lesser(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]int64)(ptr)
		return v[i] < v[j]
	}
}

func uintLesser(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]uint)(ptr)
		return v[i] < v[j]
	}
}

func uint8Lesser(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]uint8)(ptr)
		return v[i] < v[j]
	}
}

func uint16Lesser(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]uint16)(ptr)
		return v[i] < v[j]
	}
}

func uint32Lesser(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]uint32)(ptr)
		return v[i] < v[j]
	}
}

func uint64Lesser(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]uint64)(ptr)
		return v[i] < v[j]
	}
}

func float32Lesser(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]float32)(ptr)
		return v[i] < v[j]
	}
}

func float64Lesser(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]float64)(ptr)
		return v[i] < v[j]
	}
}

// GreaterOf
func stringGreater(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]string)(ptr)
		return v[i] > v[j]
	}
}

func intGreater(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]int)(ptr)
		return v[i] > v[j]
	}
}

func int8Greater(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]int8)(ptr)
		return v[i] > v[j]
	}
}

func int16Greater(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]int16)(ptr)
		return v[i] > v[j]
	}
}

func int32Greater(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]int32)(ptr)
		return v[i] > v[j]
	}
}

func int64Greater(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]int64)(ptr)
		return v[i] > v[j]
	}
}

func uintGreater(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]uint)(ptr)
		return v[i] > v[j]
	}
}

func uint8Greater(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]uint8)(ptr)
		return v[i] > v[j]
	}
}

func uint16Greater(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]uint16)(ptr)
		return v[i] > v[j]
	}
}

func uint32Greater(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]uint32)(ptr)
		return v[i] > v[j]
	}
}

func uint64Greater(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]uint64)(ptr)
		return v[i] > v[j]
	}
}

func float32Greater(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]float32)(ptr)
		return v[i] > v[j]
	}
}

func float64Greater(ptr unsafe.Pointer) func(i, j int) bool {
	return func(i, j int) bool {
		v := *(*[]float64)(ptr)
		return v[i] > v[j]
	}
}
